<?php

declare(strict_types=1);

namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use EonX\EasyMonorepo\Git\GitManager;
use EonX\EasyMonorepo\Release\AutoGeneratedReleaseNotesWorker;
use EonX\EasyMonorepo\Release\PackagesListInReadmeReleaseWorker;
use EonX\EasyMonorepo\Release\PushNextDevReleaseWorker;
use EonX\EasyMonorepo\Release\TagVersionReleaseWorker;
use EonX\EasyMonorepo\Release\UpdateTagInGithubWorkflow;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use Symplify\MonorepoBuilder\Release\ReleaseWorker\AddTagToChangelogReleaseWorker;
use Symplify\MonorepoBuilder\Release\ReleaseWorker\SetCurrentMutualDependenciesReleaseWorker;
use Symplify\MonorepoBuilder\Release\ReleaseWorker\SetNextMutualDependenciesReleaseWorker;
use Symplify\MonorepoBuilder\Release\ReleaseWorker\UpdateBranchAliasReleaseWorker;
use Symplify\MonorepoBuilder\ValueObject\Option;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator->parameters();

    $parameters->set('env(GITHUB_TOKEN)', null);
    $parameters->set(Option::GITHUB_TOKEN, '%env(GITHUB_TOKEN)%');
    $parameters->set(Option::PACKAGE_DIRECTORIES, [__DIR__ . '/packages']);
    $parameters->set(Option::PACKAGE_DIRECTORIES_EXCLUDES, []);

    $services = $containerConfigurator->services();
    $services->defaults()
        ->autoconfigure()
        ->autowire()
        ->public();

    $services->set(ClientInterface::class, Client::class);
    $services->set(GitManager::class);

    # release workers - in order to execute
    $services->set(AutoGeneratedReleaseNotesWorker::class);
    $services->set(AddTagToChangelogReleaseWorker::class);
    $services->set(UpdateTagInGithubWorkflow::class);
    $services->set(PackagesListInReadmeReleaseWorker::class);
    $services->set(SetCurrentMutualDependenciesReleaseWorker::class);
    $services->set(TagVersionReleaseWorker::class);
    $services->set(SetNextMutualDependenciesReleaseWorker::class);
    $services->set(UpdateBranchAliasReleaseWorker::class);
    $services->set(PushNextDevReleaseWorker::class);
};
