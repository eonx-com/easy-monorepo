<?php
declare(strict_types=1);

use Symfony\Component\Config\Definition\Configurator\DefinitionConfigurator;
use Symfony\Component\HttpKernel\Kernel;

return static function (DefinitionConfigurator $definition) {
    $definition->rootNode()
        ->children()
            ->stringNode('api_key')
                ->isRequired()
                ->info('Bugsnag Notifier API key, can be found in project settings')
            ->end()
            // Application Name
            ->arrayNode('app_name')
                ->canBeEnabled()
                ->children()
                    ->stringNode('env_var')->defaultValue('APP_NAME')->end()
                ->end()
            ->end()
            // Basics
            ->stringNode('project_root')
                ->defaultValue('%kernel.project_dir%/src')
            ->end()
            ->stringNode('release_stage')
                ->defaultValue('%env(APP_ENV)%')
            ->end()
            ->stringNode('runtime')
                ->defaultValue('symfony')
            ->end()
            ->stringNode('runtime_version')
                ->defaultValue(Kernel::VERSION)
            ->end()
            ->stringNode('strip_path')
                ->defaultValue('%kernel.project_dir%')
            ->end()
            // AWS ECS FARGATE
            ->arrayNode('aws_ecs_fargate')
                ->canBeEnabled()
                ->children()
                    ->stringNode('meta_url')
                        ->defaultNull()
                        ->info('URL used to fetch AWS ECS Fargate task metadata')
                    ->end()
                    ->stringNode('meta_storage_filename')
                        ->defaultValue('%kernel.cache_dir%/aws_ecs_fargate_meta.json')
                        ->info('Filename to cache AWS ECS Fargate task metadata into')
                    ->end()
                ->end()
            ->end()
            // Doctrine DBAL
            ->arrayNode('doctrine_dbal')
                ->canBeDisabled()
                ->children()
                    ->arrayNode('connections')
                        ->beforeNormalization()->castToArray()->end()
                        ->defaultValue(['default'])
                        ->stringPrototype()->end()
                    ->end()
                ->end()
            ->end()
            // Sensitive Data
            ->arrayNode('sensitive_data_sanitizer')
                ->canBeDisabled()
            ->end()
            // Session Tracking
            ->arrayNode('session_tracking')
                ->canBeEnabled()
                ->children()
                    ->stringNode('cache_directory')
                        ->defaultValue('%kernel.cache_dir%')
                        ->info('Directory used by default cache adapter provided by the package')
                    ->end()
                    ->integerNode('cache_expires_after')
                        ->defaultValue(3600)
                        ->info('Expiry for sessions cache in seconds')
                    ->end()
                    ->stringNode('cache_namespace')
                        ->defaultValue('easy_bugsnag_sessions')
                        ->info('Namespace used by default cache adapter provided by the package')
                    ->end()
                    ->arrayNode('exclude_urls')
                        ->beforeNormalization()->castToArray()->end()
                        ->stringPrototype()->end()
                        ->info('List of URLs or Regex to exclude from session tracking')
                    ->end()
                    ->stringNode('exclude_urls_delimiter')
                        ->defaultValue('#')
                        ->info('Delimiter used in Regex to resolve excluded URLs')
                    ->end()
                    ->booleanNode('messenger_message_count_for_sessions')
                        ->defaultFalse()
                        ->info('Enable/Disable session tracking for messenger messages')
                    ->end()
                ->end()
            ->end()
            // Worker Info
            ->arrayNode('worker_info')
                ->canBeEnabled()
            ->end()
            ->booleanNode('use_default_configurators')->defaultTrue()->end()
        ->end();
};
